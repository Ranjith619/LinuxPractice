Signed-off-by: Jerry Cooperstein <coop@linuxfoundation.com>

diff -Nur linux-2.6.31/arch/x86/include/asm/unistd_32.h linux-2.6.31_patched/arch/x86/include/asm/unistd_32.h
--- linux-2.6.31/arch/x86/include/asm/unistd_32.h	2009-09-09 17:13:59.000000000 -0500
+++ linux-2.6.31_patched/arch/x86/include/asm/unistd_32.h	2009-11-24 16:41:32.683330329 -0600
@@ -342,6 +342,7 @@
 #define __NR_pwritev		334
 #define __NR_rt_tgsigqueueinfo	335
 #define __NR_perf_counter_open	336
+#define __NR_my_syscall 337
 
 #ifdef __KERNEL__
 
diff -Nur linux-2.6.31/arch/x86/include/asm/unistd_64.h linux-2.6.31_patched/arch/x86/include/asm/unistd_64.h
--- linux-2.6.31/arch/x86/include/asm/unistd_64.h	2009-09-09 17:13:59.000000000 -0500
+++ linux-2.6.31_patched/arch/x86/include/asm/unistd_64.h	2009-11-24 16:42:12.630240699 -0600
@@ -661,6 +661,8 @@
 __SYSCALL(__NR_rt_tgsigqueueinfo, sys_rt_tgsigqueueinfo)
 #define __NR_perf_counter_open			298
 __SYSCALL(__NR_perf_counter_open, sys_perf_counter_open)
+#define __NR_my_syscall			299
+__SYSCALL(__NR_my_syscall, sys_my_syscall)
 
 #ifndef __NO_STUBS
 #define __ARCH_WANT_OLD_READDIR
diff -Nur linux-2.6.31/arch/x86/kernel/syscall_table_32.S linux-2.6.31_patched/arch/x86/kernel/syscall_table_32.S
--- linux-2.6.31/arch/x86/kernel/syscall_table_32.S	2009-09-09 17:13:59.000000000 -0500
+++ linux-2.6.31_patched/arch/x86/kernel/syscall_table_32.S	2009-11-24 16:43:10.703365195 -0600
@@ -336,3 +336,4 @@
 	.long sys_pwritev
 	.long sys_rt_tgsigqueueinfo	/* 335 */
 	.long sys_perf_counter_open
+	.long sys_my_syscall
\ No newline at end of file
diff -Nur linux-2.6.31/kernel/sys.c linux-2.6.31_patched/kernel/sys.c
--- linux-2.6.31/kernel/sys.c	2009-09-09 17:13:59.000000000 -0500
+++ linux-2.6.31_patched/kernel/sys.c	2009-11-24 16:43:46.917239804 -0600
@@ -1604,3 +1604,24 @@
 	return ret;
 }
 EXPORT_SYMBOL_GPL(orderly_poweroff);
+
+
+/* Adding a dynamical system call */
+
+struct my_sc_struct{
+    long (*fun) (unsigned long p1);
+}  my_sc = {NULL};
+EXPORT_SYMBOL(my_sc);
+
+/* for kernels before 2.6.29 use this
+   asmlinkage long sys_my_syscall(unsigned long p1)
+*/
+SYSCALL_DEFINE1(my_syscall, unsigned long, p1)
+{
+    struct my_sc_struct *s = (struct my_sc_struct *)&my_sc;
+    printk(KERN_INFO "Entering my_syscall with p1 = %ld at jiffies=%ld\n",
+	p1, jiffies);
+    if (!s || !s->fun)
+	return -ENOSYS;
+    return s->fun(p1);
+}
