Signed-off-by: Jerry Cooperstein <coop@linuxfoundation.com>

diff --git a/arch/x86/include/asm/unistd_32.h b/arch/x86/include/asm/unistd_32.h
index 3baf379..60961af 100644
--- a/arch/x86/include/asm/unistd_32.h
+++ b/arch/x86/include/asm/unistd_32.h
@@ -343,10 +343,11 @@
 #define __NR_rt_tgsigqueueinfo	335
 #define __NR_perf_event_open	336
 #define __NR_recvmmsg		337
+#define __NR_my_syscall 338
 
 #ifdef __KERNEL__
 
-#define NR_syscalls 338
+#define NR_syscalls 339
 
 #define __ARCH_WANT_IPC_PARSE_VERSION
 #define __ARCH_WANT_OLD_READDIR
diff --git a/arch/x86/include/asm/unistd_64.h b/arch/x86/include/asm/unistd_64.h
index 4843f7b..6b94424 100644
--- a/arch/x86/include/asm/unistd_64.h
+++ b/arch/x86/include/asm/unistd_64.h
@@ -663,6 +663,8 @@ __SYSCALL(__NR_rt_tgsigqueueinfo, sys_rt_tgsigqueueinfo)
 __SYSCALL(__NR_perf_event_open, sys_perf_event_open)
 #define __NR_recvmmsg				299
 __SYSCALL(__NR_recvmmsg, sys_recvmmsg)
+#define __NR_my_syscall			300
+__SYSCALL(__NR_my_syscall, sys_my_syscall)
 
 #ifndef __NO_STUBS
 #define __ARCH_WANT_OLD_READDIR
diff --git a/arch/x86/kernel/syscall_table_32.S b/arch/x86/kernel/syscall_table_32.S
index 15228b5..7f0ccfb 100644
--- a/arch/x86/kernel/syscall_table_32.S
+++ b/arch/x86/kernel/syscall_table_32.S
@@ -337,3 +337,4 @@ ENTRY(sys_call_table)
 	.long sys_rt_tgsigqueueinfo	/* 335 */
 	.long sys_perf_event_open
 	.long sys_recvmmsg
+	.long sys_my_syscall
diff --git a/kernel/sys.c b/kernel/sys.c
index 26a6b73..73db4c4 100644
--- a/kernel/sys.c
+++ b/kernel/sys.c
@@ -1654,3 +1654,24 @@ int orderly_poweroff(bool force)
 	return ret;
 }
 EXPORT_SYMBOL_GPL(orderly_poweroff);
+
+
+/* Adding a dynamical system call */
+
+struct my_sc_struct{
+    long (*fun) (unsigned long p1);
+}  my_sc = {NULL};
+EXPORT_SYMBOL(my_sc);
+
+/* for kernels before 2.6.29 use this
+   asmlinkage long sys_my_syscall(unsigned long p1)
+*/
+SYSCALL_DEFINE1(my_syscall, unsigned long, p1)
+{
+    struct my_sc_struct *s = (struct my_sc_struct *)&my_sc;
+    printk(KERN_INFO "Entering my_syscall with p1 = %ld at jiffies=%ld\n",
+	p1, jiffies);
+    if (!s || !s->fun)
+	return -ENOSYS;
+    return s->fun(p1);
+}
