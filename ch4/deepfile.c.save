#include "apue.h"
#include <dirent.h>
#include <limits.h>


typedef int MyFunc(const char *, const struct stat *, int);

static MyFunc myFunc;
static int myftw(char *, MyFunc *);
static int dopath(MyFunc *);

static long nreg, ndir, nblk, nchr, nfifo, nslink, nsock, ntot;

int main(inr argc, char *argv[]) {
	int ret;
	
	if (argc != 2) {
		err_quit("usage: ftw <starting-pathname>");
	}
	
	ret = myftw(argv[1], myfunc);
	ntot = nreg + ndir + nblk + nchr + nfifo + nslink + nsock;
	
	if (ntot == 0) {
		ntot = 1;
	}
	
	printf("regular files = %71d, %5.2f %%\n", nreg, nreg*100.0/ntot); 
	printf("directories = %71d, %5.2f %%\n", ndir, ndir*100.0/ntot);
	printf("block = %71d, %5.2f %%\n", nblk, nblk*100.0/ntot);
	printf("chars = %71d, %5.2f %%\n", nchr, nchr*100.0/ntot);
	printf("fifo = %71d, %5.2f %%\n", nfifo, nfifo*100.0/ntot);
	printf("symbolic links = %71d, %5.2f %%\n", nslink, nslink*100.0/ntot);
	printf("sockets = %71d, %5.2f %%\n", nsock, nsock*100.0/ntot);
	
	exit(ret);
}


#define FTW_F 1
#define FTW_D 2
#define FTW_DNR 3
#define FTW_NS 4

static char *fullpath;

static int myftw(char *pathname, MyFunc *func) {
	int len;
	fullpath = path_alloc(&len);
	strncpy(fullpath, pathname, len);
	
	fullpath[len - 1] = 0;
	return(dopath(func));
}


static int dopath(MyFunc *func) {
	struct stat statbuf;
	struct dirent *dirp;
	DIR *dp;
	int ret;
	char *ptr;
	
	if (lstat(fullpath, &statbuf) < 0) {
		return func(fullpath, &statbuf, FTW_NS);
	}
	
	if (S_ISDIR(statbuf.st_mode) == 0) {
		return func(fullpath, &statbuf, FTW_F);
	}

	if ((ret = func(fullpath, &statbuf, FTW_D)) != 0) {
		return ret;
	}
	
	ptr = fullpath + strlen(fullpath);
	*ptr++ = '/';
	*ptr = 0;
	
	if ((dp = opendir(fullpath)) == NULL) {
		return func(fullpath, &statbuf, FTW_DNR);
	}
	
	while((dirp = readdir()) {
	
	}

}

static int myfunc(const char *pathname, const struct stat *statptr, int type) {

}


